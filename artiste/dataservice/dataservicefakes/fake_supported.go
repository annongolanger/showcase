// This file was generated by counterfeiter
package dataservicefakes

import (
	"sync"

	"github.com/benwaine/artistprof/artiste/dataservice"
)

type FakeSupported struct {
	SupportedStub        func(name string) (supported bool, id string)
	supportedMutex       sync.RWMutex
	supportedArgsForCall []struct {
		name string
	}
	supportedReturns struct {
		result1 bool
		result2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSupported) Supported(name string) (supported bool, id string) {
	fake.supportedMutex.Lock()
	fake.supportedArgsForCall = append(fake.supportedArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Supported", []interface{}{name})
	fake.supportedMutex.Unlock()
	if fake.SupportedStub != nil {
		return fake.SupportedStub(name)
	} else {
		return fake.supportedReturns.result1, fake.supportedReturns.result2
	}
}

func (fake *FakeSupported) SupportedCallCount() int {
	fake.supportedMutex.RLock()
	defer fake.supportedMutex.RUnlock()
	return len(fake.supportedArgsForCall)
}

func (fake *FakeSupported) SupportedArgsForCall(i int) string {
	fake.supportedMutex.RLock()
	defer fake.supportedMutex.RUnlock()
	return fake.supportedArgsForCall[i].name
}

func (fake *FakeSupported) SupportedReturns(result1 bool, result2 string) {
	fake.SupportedStub = nil
	fake.supportedReturns = struct {
		result1 bool
		result2 string
	}{result1, result2}
}

func (fake *FakeSupported) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.supportedMutex.RLock()
	defer fake.supportedMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSupported) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dataservice.Supported = new(FakeSupported)
