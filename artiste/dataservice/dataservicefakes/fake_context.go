// This file was generated by counterfeiter
package dataservicefakes

import (
	"context"
	"sync"
	"time"
)

type FakeContext struct {
	DeadlineStub        func() (deadline time.Time, ok bool)
	deadlineMutex       sync.RWMutex
	deadlineArgsForCall []struct{}
	deadlineReturns     struct {
		result1 time.Time
		result2 bool
	}
	DoneStub        func() <-chan struct{}
	doneMutex       sync.RWMutex
	doneArgsForCall []struct{}
	doneReturns     struct {
		result1 <-chan struct{}
	}
	ErrStub        func() error
	errMutex       sync.RWMutex
	errArgsForCall []struct{}
	errReturns     struct {
		result1 error
	}
	ValueStub        func(key interface{}) interface{}
	valueMutex       sync.RWMutex
	valueArgsForCall []struct {
		key interface{}
	}
	valueReturns struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContext) Deadline() (deadline time.Time, ok bool) {
	fake.deadlineMutex.Lock()
	fake.deadlineArgsForCall = append(fake.deadlineArgsForCall, struct{}{})
	fake.recordInvocation("Deadline", []interface{}{})
	fake.deadlineMutex.Unlock()
	if fake.DeadlineStub != nil {
		return fake.DeadlineStub()
	} else {
		return fake.deadlineReturns.result1, fake.deadlineReturns.result2
	}
}

func (fake *FakeContext) DeadlineCallCount() int {
	fake.deadlineMutex.RLock()
	defer fake.deadlineMutex.RUnlock()
	return len(fake.deadlineArgsForCall)
}

func (fake *FakeContext) DeadlineReturns(result1 time.Time, result2 bool) {
	fake.DeadlineStub = nil
	fake.deadlineReturns = struct {
		result1 time.Time
		result2 bool
	}{result1, result2}
}

func (fake *FakeContext) Done() <-chan struct{} {
	fake.doneMutex.Lock()
	fake.doneArgsForCall = append(fake.doneArgsForCall, struct{}{})
	fake.recordInvocation("Done", []interface{}{})
	fake.doneMutex.Unlock()
	if fake.DoneStub != nil {
		return fake.DoneStub()
	} else {
		return fake.doneReturns.result1
	}
}

func (fake *FakeContext) DoneCallCount() int {
	fake.doneMutex.RLock()
	defer fake.doneMutex.RUnlock()
	return len(fake.doneArgsForCall)
}

func (fake *FakeContext) DoneReturns(result1 <-chan struct{}) {
	fake.DoneStub = nil
	fake.doneReturns = struct {
		result1 <-chan struct{}
	}{result1}
}

func (fake *FakeContext) Err() error {
	fake.errMutex.Lock()
	fake.errArgsForCall = append(fake.errArgsForCall, struct{}{})
	fake.recordInvocation("Err", []interface{}{})
	fake.errMutex.Unlock()
	if fake.ErrStub != nil {
		return fake.ErrStub()
	} else {
		return fake.errReturns.result1
	}
}

func (fake *FakeContext) ErrCallCount() int {
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	return len(fake.errArgsForCall)
}

func (fake *FakeContext) ErrReturns(result1 error) {
	fake.ErrStub = nil
	fake.errReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContext) Value(key interface{}) interface{} {
	fake.valueMutex.Lock()
	fake.valueArgsForCall = append(fake.valueArgsForCall, struct {
		key interface{}
	}{key})
	fake.recordInvocation("Value", []interface{}{key})
	fake.valueMutex.Unlock()
	if fake.ValueStub != nil {
		return fake.ValueStub(key)
	} else {
		return fake.valueReturns.result1
	}
}

func (fake *FakeContext) ValueCallCount() int {
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return len(fake.valueArgsForCall)
}

func (fake *FakeContext) ValueArgsForCall(i int) interface{} {
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return fake.valueArgsForCall[i].key
}

func (fake *FakeContext) ValueReturns(result1 interface{}) {
	fake.ValueStub = nil
	fake.valueReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeContext) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deadlineMutex.RLock()
	defer fake.deadlineMutex.RUnlock()
	fake.doneMutex.RLock()
	defer fake.doneMutex.RUnlock()
	fake.errMutex.RLock()
	defer fake.errMutex.RUnlock()
	fake.valueMutex.RLock()
	defer fake.valueMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeContext) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ context.Context = new(FakeContext)
